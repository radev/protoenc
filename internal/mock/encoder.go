// Code generated by MockGen. DO NOT EDIT.
// Source: encoder.go
//
// Generated by this command:
//
//	mockgen -destination=internal/mock/encoder.go -package mock -source=encoder.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sr "github.com/twmb/franz-go/pkg/sr"
	gomock "go.uber.org/mock/gomock"
)

// MockSchemaRegistryClient is a mock of SchemaRegistryClient interface.
type MockSchemaRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRegistryClientMockRecorder
}

// MockSchemaRegistryClientMockRecorder is the mock recorder for MockSchemaRegistryClient.
type MockSchemaRegistryClientMockRecorder struct {
	mock *MockSchemaRegistryClient
}

// NewMockSchemaRegistryClient creates a new mock instance.
func NewMockSchemaRegistryClient(ctrl *gomock.Controller) *MockSchemaRegistryClient {
	mock := &MockSchemaRegistryClient{ctrl: ctrl}
	mock.recorder = &MockSchemaRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaRegistryClient) EXPECT() *MockSchemaRegistryClientMockRecorder {
	return m.recorder
}

// CreateSchema mocks base method.
func (m *MockSchemaRegistryClient) CreateSchema(ctx context.Context, subject string, s sr.Schema) (sr.SubjectSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", ctx, subject, s)
	ret0, _ := ret[0].(sr.SubjectSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockSchemaRegistryClientMockRecorder) CreateSchema(ctx, subject, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockSchemaRegistryClient)(nil).CreateSchema), ctx, subject, s)
}
